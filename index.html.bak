<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<title>Ontologías</title>

		<meta name="description" content="Ontologías">
		<meta name="author" content="Miguel Expósito Martín">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">

		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/solarized.css" id="theme">

		<!-- Code syntax highlighting -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
                <section>
                    <section data-id="1" data-markdown>
                        <script type="text/template">
                            # semántica
                        </script>
                    </section>

                    <section data-id="1" data-markdown>
                        <script type="text/template">
                           - Redes semánticas
                           - Minería de textos y minería web
                           - **Ontologías**
                           - Linked Data
                           - Análisis de redes complejas
                        </script>
                    </section>

                </section>
                <section>
				<section data-id="1" data-markdown>
					<script type="text/template">
					# Ontologías

					</script>
				</section>
                <section data-id="1" data-markdown>
                    <script type="text/template">
                        ### Ontologías
                        - Introducción a RDF
                        - Introducción a Ontologías
                        - RDFs
                        - OWL
                        - SKOS


                    </script>
                </section>
                </section>
                <section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                # Introducción a RDF

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## ¿Qué es RDF?

                > Un marco de trabajo para expresar información sobre recursos.

                documentos, personas, objetos físicos y/o abstractos...

                - información en la web necesita ser procesada por aplicaciones
                - RDF ofrece un marco común sin pérdida de significado

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                 ## ¿Para qué RDF?
                 - para añadir información legible para motores de búsqueda
                 - para enriquecer un dataset enlazándolo con datasets de terceros
                 - para entrelazar feeds de APIs, facilitando su descubrimiento
                 - para construir agregaciones de datos sobre determinados temas



                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## ¿Para qué RDF?
                - para proporcionar un estándar de intercambio de datos entre BBDDs
                - para permitir consultas cruzadas a datasets de una organización
                - para enriquecer, describir y contextualizar los datos
                - para fomentar nuevas asociaciones entre datasets


                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## ¿Y el modelo relacional?
                - una tabla es fácil de mostrar, ordenar y editar
                - su semántica está en las filas y columnas de sus tablas
                - una BDR permite cruzar varias tablas de forma estándar
                - evolucionar los esquemas es complejo:

                datos + consultas



                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## ¿Y el modelo relacional?
                - además, los esquemas se pueden volver tremendamente complicados

                soluciones: procedimientos almacenados y ORMs

                #### a veces, es necesario modelar para lo inesperado: flexibilidad

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## modelo de datos RDF

                - RDF permite hacer declaraciones sobre recursos.
                - El formato de una declaración es sencillo:

                **sujeto + predicado + objeto**

                - El predicado representa la naturaleza de la relación
                - Las declaraciones RDF se denominan tripletas


                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## ejemplo informal de tripletas

                        <Bob> <is a> <person>.
                        <Bob> <is a friend of> <Alice>.
                        <Bob> <is born on> <the 4th of July 1990>.
                        <Bob> <is interested in> <the Mona Lisa>.
                        <the Mona Lisa> <was created by> <Leonardo da Vinci>.
                        <the video 'La Joconde à Washington'> <is about> <the Mona Lisa>.

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## ejemplo informal de tripletas

                ![Grafo de tripletas](./img/example-graph.jpg)<!-- .element: height="75%" width="75%"-->
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## IRIs, URIs, URLs
                - URI: identifica un recurso físico o abstracto
                - IRI: como la URI, pero incorpora UTF-8
                - URL: una URI que, además de identificar, proporciona una forma de localizar el recurso a través de su mecanismo de acceso primario

                http://dbpedia.org/resource/Leonardo_da_Vinci

                **son identificadores únicos (fuertes)**


                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## IRIs, URIs, URLs
                Es común acortar los URIs asignando un espacio de nombres a su base:

                http://www.w3.org/1999/02/22-rdf-syntax-ns#type

                rdf = http://www.w3.org/1999/02/22-rdf-syntax-ns#

                **rdf:type**


                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## literales
                valores básicos que no son IRIs (strings, dates...)

                Muchos [tipos de datos](https://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/#section-Datatypes) provienen de XML Schema


                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## blank nodes

                - A veces es útil representar un recurso sin usar un identificador.
                - Se asemejan a variables en álgebra: representan algo cuyo valor se desconoce.
                - Pueden aparecer en las posiciones de sujeto y objeto.
                - Se usan para agrupar conjuntos de declaraciones.

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## ejemplo de blank nodes

                ![Blank node](./img/example-blank-node.jpg)

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## grafos múltiples

                RDF permite agrupar declaraciones en varios grafos y asociarlos a un IRI determinado

                        <http://example.org/bob#me> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person> <http://example.org/bob>

                **se denominan quads**


                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## formatos de serialización

                N-triples:

                        <http://example.org/bob#me> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person> .
                        <http://example.org/bob#me> <http://xmlns.com/foaf/0.1/knows> <http://example.org/alice#me> .
                        <http://example.org/bob#me> <http://schema.org/birthDate> "1990-07-04"^^<http://www.w3.org/2001/XMLSchema#date> .
                        <http://example.org/bob#me> <http://xmlns.com/foaf/0.1/topic_interest> <http://www.wikidata.org/entity/Q12418> .

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## formatos de serialización

                Turtle:

                        BASE   <http://example.org/>
                        PREFIX foaf: <http://xmlns.com/foaf/0.1/>
                        PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
                        PREFIX schema: <http://schema.org/>
                        PREFIX dcterms: <http://purl.org/dc/terms/>
                        PREFIX wd: <http://www.wikidata.org/entity/>

                        <bob#me>
                        a foaf:Person ;
                        foaf:knows <alice#me> ;
                        schema:birthDate "1990-07-04"^^xsd:date ;
                        foaf:topic_interest wd:Q12418 .

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## formatos de serialización

                blank node:

                        PREFIX lio: <http://purl.org/net/lio#>

                        <http://dbpedia.org/resource/Mona_Lisa> lio:shows _:x .
                        _:x a <http://dbpedia.org/resource/Cypress> .

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## formatos de serialización

                JSON-LD:

                        {
                            "@context": "example-context.json",
                            "@id": "http://example.org/bob#me",
                            "@type": "Person",
                            "birthdate": "1990-07-04",
                            "knows": "http://example.org/alice#me",
                            "interest": {
                              "@id": "http://www.wikidata.org/entity/Q12418",
                              "title": "Mona Lisa",
                              "subject_of": "http://data.europeana.eu/item/04802/243FA8618938F4117025F17A8B813C5F9AA4D619",
                              "creator": "http://dbpedia.org/resource/Leonardo_da_Vinci"
                      }
                    }

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## formatos de serialización

                JSON-LD context:

                    {
                      "@context": {
                        "foaf": "http://xmlns.com/foaf/0.1/",
                        "Person": "foaf:Person",
                        "interest": "foaf:topic_interest",
                        "knows": {
                          "@id": "foaf:knows",
                          "@type": "@id"
                        },
                        "birthdate": {
                          "@id": "http://schema.org/birthDate",
                          "@type": "http://www.w3.org/2001/XMLSchema#date"
                        },
                        "dcterms": "http://purl.org/dc/terms/",
                        "title": "dcterms:title",
                        "creator": {
                          "@id": "dcterms:creator",
                          "@type": "@id"
                        },
                        "subject_of": {
                          "@reverse": "dcterms:subject",
                          "@type": "@id"
                        }
                      }
                    }

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## formatos de serialización

                RDF/XML:

                    <?xml version="1.0" encoding="utf-8"?>
                    <rdf:RDF
                                     xmlns:dcterms="http://purl.org/dc/terms/"
                                     xmlns:foaf="http://xmlns.com/foaf/0.1/"
                                     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                                     xmlns:schema="http://schema.org/">
                       <rdf:Description rdf:about="http://example.org/bob#me">
                          <rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/>
                          <schema:birthDate rdf:datatype="http://www.w3.org/2001/XMLSchema#date">1990-07-04</schema:birthDate>
                          <foaf:knows rdf:resource="http://example.org/alice#me"/>
                          <foaf:topic_interest rdf:resource="http://www.wikidata.org/entity/Q12418"/>
                       </rdf:Description>
                       <rdf:Description rdf:about="http://www.wikidata.org/entity/Q12418">
                          <dcterms:title>Mona Lisa</dcterms:title>
                          <dcterms:creator rdf:resource="http://dbpedia.org/resource/Leonardo_da_Vinci"/>
                       </rdf:Description>
                       <rdf:Description rdf:about="http://data.europeana.eu/item/04802/243FA8618938F4117025F17A8B813C5F9AA4D619">
                          <dcterms:subject rdf:resource="http://www.wikidata.org/entity/Q12418"/>
                       </rdf:Description>
                    </rdf:RDF>

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## vocabularios

                - RDF se utiliza conjuntamente con vocabularios para proporcionar información semántica.
                - Para definir vocabularios, RDF proporciona la herramienta básica RDF Schema (RDFs)

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## vocabularios

                - Clase: categoría para clasificar recursos.
                - Tipo: relación entre instancia y su clase correspondiente.
                - Dominio: colección de tipos que usan una propiedad.
                - Rango: tipos de valores que puede tomar una propiedad.

                **un recurso se considera miembro de una clase por sus propiedades**


                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## vocabularios
                <!-- .slide: style="font-size:30px" -->

                |Construct|Sintaxis|
                |---------|--------|
                |Class (class)|`C rdf:type rdfs:Class`|
                |Property (class)|`P rdf:type rdf:Property`|
                |type (property)|`I rdf:type C`|
                |subClassOf (property)|`C1 rdfs:subClassOf C2`|
                |subPropertyOf (property)|`P1 rdfs:subPropertyOf P2`|
                |domain (property)|`P rdfs:domain C`|
                |range (property)|`P rdfs:range C`|

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## modelo informal
                    <Person> <type> <Class>
                    <is a friend of> <type> <Property>
                    <is a friend of> <domain> <Person>
                    <is a friend of> <range> <Person>
                    <is a good friend of> <subPropertyOf> <is a friend of>

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## modelo real
                ![Modelo real](./img/icane_model.png)<!-- .element: height="75%" width="75%"-->

                </script>
                </section>

                </section>
<section>
<section data-id="1" data-markdown>
<script type="text/template">
# Introducción a Ontologías

</script>
</section>


                <section data-id="1" data-markdown>
                <script type="text/template">
                ## Definición
                Para un filósofo:

                >Un sistema particular de categorías sistematizando cierta visión del mundo [Guarino, 1998]

                </script>
                </section>
<section data-id="1" data-markdown>
<script type="text/template">
## Definición
Para un científico de datos:

>Una especificación formal de una conceptualización compartida [Struder et. al., 1998]

</script>
</section>

<section data-id="1" data-markdown>
<script type="text/template">
## Componentes

Clases

- Representan conceptos tomados en su sentido más amplio
- Suelen estar organizadas en taxonomías


</script>
</section>

<section data-id="1" data-markdown>
<script type="text/template">
## Componentes

Relaciones

- Representan un tipo de asociación entre los conceptos del dominio
- Las contenidas en una ontología normalmente son binarias (dominio - rango)
- Se utilizan también para expresar atributos de conceptos (su rango es un tipo de datos y no un concepto)


</script>
</section>
<section data-id="1" data-markdown>
<script type="text/template">
## Componentes

Axiomas

- Modelan afirmaciones que son siempre ciertas
- Sirven para verificar la consistencia de la ontología o de sus conocimientos almacenados
- Son útiles para inferir conocimientos nuevos


</script>
</section>

<section data-id="1" data-markdown>
<script type="text/template">
## Componentes

Instancias

- Representan individuos o elementos en una ontología

</script>
</section>

<section data-id="1" data-markdown>
<script type="text/template">
## Beneficios

- Proporcionan definiciones comunes y compartidas sobre conceptos de un dominio
- Permiten reutilizar conocimientos de un dominio
- Proporcionan términos a utilizar al crear documentos RDF
- Ofrecen un mecanismo de codificar conocimiento y semántica para ser procesados por máquinas

</script>
</section>



                </section>
                <section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  RDFs

                RDF Schema

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## modelado con RDFs
                - Lenguaje de esquema básico y ligero
                - En su naturaleza, es orientado a objetos
                - Declarar tipos es sencillo (frente a las PKs y FKs de una BDR)

                >su propósito es definir vocabularios compartidos entre aplicaciones para facilitar el intercambio de datos entre ellas



                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## modelado con RDFs

                `rdf:type`

                - Permite especificar que un concepto es instancia de una clase

                        ex:miHondaCivic rdf:type ex:Vehiculo
                        ex:miHondaCivic rdf:type ex:ArticuloEnVenta
                        ex:miHomdaCivic rdf:type ex:BienAsegurado



                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## modelado con RDFs

                `rdf:class` y `rdfs:property`

                - Relacionan clases y propiedades

                      ex:articuloEnVenta rdf:type rdf:Class
                      ex:precio rdf:type rdfs:property

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## modelado con RDFs

                `rdfs:domain` y `rdfs:range`

                - Dominio: conceptos a la que esa propiedad aplica
                - Rango: valores que la propiedad puede aceptar

                        ex:precio rdfs:domain rdf:ArticuloEnVenta
                        ex:precio rdfs:range XSD:int

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## modelado con RDFs

                `subClassOf`

                - Las instancias de una subclase lo son de su clase padre
                - Las propiedades de una clase lo son de su clase hija

                        ex:cocheUsado rdfs:subClassOf rdf:ArticuloEnVenta


                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## modelado con RDFs

                `subPropertyOf`

                - Propiedades incluidas en otra propiedad más general

                        ex:Madre rdfs:subPropertyOf rdf:Progenitor


                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## modelado con RDFs

                otros constructs

                - `rdfs:Label`: texto descriptivo del recurso
                - `rdfs:Comment`: comentario más extenso sobre el recurso
                - `rdfs:SeeAlso`: enlaces a otras fuentes relevantes
                - `rdfs:Literal`: tipo de dato primitivo


                </script>
                </section>
                </section>
                <section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL

                Web Ontology Language

                - Uno de los estándares principales de la web semántica
                - Permite un modelado rápido y flexible
                - Base para un razonamiento automático eficiente


                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: características

                - Más expresivo que otros lenguajes de modelado
                - Flexible: modelado incremental
                - Eficiente: permite soportar varios tipos de tareas de razonamiento

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: diferencias con RDFs

                vocabulario

                - OWL incluye RDFs y ofrece mucho más

                        ex:Madre           owl:unionOf        (ex:Progenitor, ex:Mujer)
                        IFCA:JohnSmith     owl:sameAs         PersonalDatabase:JohnQSmith
                        ex:MiPais          owl:allValuesFrom  (Pais:España, Pais:Italia, …)

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: diferencias con RDFs

                flexibilidad

                - OWL permite especificar cómo usar un vocabulario y cómo no usarlo
                - OWL permite restringir los modelos de datos para permitir consultas más rápidas

                >En RDFs un recurso puede definirse como clase e instancia simultáneamente. OWL no lo permite.

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: diferencias con RDFs

                anotaciones y meta-metadatos

                - OWL ofrece anotaciones para enlazar modelos de datos

                        owl:Import
                        owl:versionInfo
                        owl:backwardsCompatibleWith
                        owl:deprecatedProperty

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  perfiles de OWL

                - Existen para permitir un trade-off entre expresividad en el modelado y requisitos computacionales en el razonamiento automático
                - Si no se está usando OWL para razonamiento automático, se puede usar el perfil más expresivo (´OWL 2 / Full´)

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  perfiles de OWL: OWL 2 / Full

                - El perfil más expresivo, permite usar todos los constructs disponibles
                - Las reglas de inferencia pueden ser tan complejas que disparen el coste computacional (tiempo)

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  perfiles de OWL: OWL 2 / EL

                - Útil si se tienen muchas clases y propiedades enlazadas a través de relaciones complejas y se desea que el reazonador descubra nuevas relaciones
                - Dichas relaciones entre clases pueden inferirse en tiempo polinomial

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  perfiles de OWL: OWL 2 / QL

                - Orientado hacia un procesamiento eficiente de muchos datos de tipo instancia (por ejemplo, provenientes de una BDR)
                - Está lo suficientemente limitado para poder reescribir una consulta en SQL

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  perfiles de OWL: OWL 2 / RL

                - Orientado hacia la ejecución eficiente en un motor de reglas de negocio
                - Funciona mejor con datos en RDF y reglas que podrían implementar cualquier lógica de negocio arbitraria

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: clases
                - Una colección de individuos
                - Una forma de describir parte del mundo
                - Ej: persona, animal, dispositivo
                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                - Una colección de relaciones entre individuos
                - Una forma de describir un tipo de relación entre individuos
                - Ej: tienePadre, tieneAnimal, cumpleAños
                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: individuos
                - Objetos en el mundo
                - Pertenecen a clases
                - Se relacionan con otros objetos y con valores de datos a través de propiedades
                - Ej: Miguel, AyuntamientoDeSantander, IFCA
                </script>
                </section>


                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: clases y recursos
                `intersectionOf`

                - Cualquier instancia de la primera clase lo es también de las especificadas en la lista

                        ex:Madre     owl:intersectionOf    (ex:Mujer, ex:Progenitor)
                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: clases y recursos
                `unionOf`

                - Cualquier instancia de la primera clase lo es también de **al menos una** especificadas en la lista

                        ex:Progenitor     owl:unionOf    (:Madre, :Padre)
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: clases y recursos
                `complementOf`

                - La primera clase es equivalente a todo lo que no esté en la segunda

                        ex:Progenitor     owl:complementOf    ex:NoProgenitor
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: clases y recursos
                `disjointWith`

                - La primera clase y la segunda no tienen miembros en común

                        ex:Hombre     owl:disjointWith    ex:Mujer
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: clases y recursos
                `equivalentClass`

                - La primera clase y la segunda contienen los mismos miembros

                        ex:HumanoHembraAdulto     owl:equivalentClass    ex:Mujer
                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: clases y recursos
                `sameAs`

                - El primer recurso se refiere exactamente al mismo que el segundo

                        ex:Spiderman     owl:sameAs    ex:PeterParker
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: clases y recursos
                `differentFrom`

                - El primer recurso se refiere a uno distinto del segundo

                        ex:AnaPastorMinistra    owl:differentFrom    ex:AnaPastorPeriodista
                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `DatatypeProperty`

                - La propiedad enlaza a valores de datos simples

                `ex:cumpleAños` enlaza a una fecha
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `ObjectProperty`

                - La propiedad enlaza a otro recurso

                `ex:tieneConyuge` enlaza a una persona (otro recurso)
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `TransitiveProperty`

                - Si la propiedad enlaza A con B y B con C, también enlaza A con C

                        `ex:tieneAncestro`
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `SymmetricProperty`

                - Si la propiedad relaciona A con B, también B con A

                        `ex:tieneConyuge`
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `AsymmetricProperty`

                - Si la propiedad relaciona A con B, nunca relaciona B con A

                        `ex:tieneHijo`
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `ReflexiveProperty`

                - La propiedad enlaza algo consigo mismo

                        `ex:viveCon`
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `IrreflexiveProperty`

                - La propiedad nunca enlaza algo consigo mismo

                        `ex:tieneConyuge`
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `FunctionalProperty`

                - La propiedad solo enlaza como mucho con un recurso

                        `ex:cumpleAños`
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `InverseFunctionalProperty`

                - El sujeto de esta propiedad se identifica unívocamente por el valor de la misma

                        `ex:tieneDNI`
                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `InverseOf`

                - Las dos propiedades son inversas la una de la otra

                       ex:tieneHijo    owl:InverseOf    ex:tieneProgenitor
                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: propiedades
                `equivalentProperty`

                - Las dos propiedades son exactamente las mismas, aunque tengan distinta intencionalidad

                        ex:fechaNacimiento    owl:equivalentProperty   ex:cumpleAños
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: restricciones
                >Una restricción es una clase que se define por una descripción de sus miembros en términos de propiedades existentes y clases.
                `owl:onProperty` especifica qué propiedad se va a usar en la definición de la clase restricción

                Se usa la notación [...] para referirse a un nodo anónimo que será sujeto de todas las tripletas (una por línea, separadas por ;)
                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: restricciones
                `cardinality, min-cardinality, max-cardinality`

                - La propiedad puede tener un determinado número de valores

                        ex:Coche   owl:equivalentClass
                        [  rdf:type owl:Restriction;
                           owl:onProperty  ex:tieneRueda;
                           owl:cardinality "4"^^xsd:int].

                *Todos aquellos individuos que tienen 4 ruedas*
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: restricciones
                `hasValue`

                - Todos los objetos de la propiedad tienen el valor especificado

                        ex:HijosDePepe   owl:equivalentClass
                        [  rdf:type owl:Restriction;
                           owl:onProperty  ex:tienePadre;
                           owl:hasValue  ex:Pepe].

                *Todos aquellos individuos que tienen de padre a Pepe*
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: restricciones
                `someValuesFrom`

                - Al menos un objeto de esa propiedad es miembro de la clase especificada

                        ex:Padre   owl:equivalentClass
                        [  rdf:type owl:Restriction;
                           owl:onProperty  ex:tieneHijo;
                           owl:someValuesFrom  ex:Person].

                *Cualquier instancia de la clase Padre tiene al menos un hijo, que es instancia de la clase Persona*
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  OWL: restricciones
                `allValuesFrom`

                - Todos los objetos de esa propiedad son miembros de la clase especificada

                ex:Vegetariano   owl:equivalentClass
                [  rdf:type owl:Restriction;
                owl:onProperty  ex:come;
                owl:allValuesFrom  ex:NoCarne].

                *La clase Vegetariano equivale a la clase de todos los individuos que comen "no carne". *
                </script>
                </section>

                </section>

                <section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                # SKOS
                Simple **Knowledge Organization Systems**

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## KOS: introducción
                <!-- .slide: style="font-size:30px" -->

                ¿Qué es un KOS?

                > Un conjunto de elementos, controlados y estructurados, que pueden utilizarse para describir e indexar objetos, navegar por colecciones, etc. Se utilizan comúnmente en bibliotecas, museos y otras áreas.

                SKOS nace para permitir crear organizaciones de conocimiento modulares que puedan ser reutilizadas y referenciadas en la Web.

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ## KOS: introducción

                Tipos de KOS
                - Taxonomía: la ciencia de la clasificación. Basada en relaciones jerárquicas.
                - Tesauro: extensión de una taxonomía. Añade la capacidad de hacer otras declaraciones sobre los sujetos clasificados (ej: significado, definiciones).

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## KOS: introducción

                Utilidad
                - Mayor robustez en las búsquedas (términos relacionados)
                - Ayudan a construir mejores interfaces de navegación
                - Permiten organizar formalmente el conocimiento de un dominio
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## KOS vs ontologías
                - los KOS se usan para organizar conocimiento, las ontologías para representarlo.
                - Los KOS son semánticamente mucho menos rigurosos que las ontologías.

                >Llevando los KOS a la Web Semántica se consigue hacer estos esquemas legibles por máquinas, promover la reutilización y potenciar la interoperabilidad
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS
                vocabulario RDF para representar KOS (taxonomías, tesauros, esquemas de clasificación y listas de encabezados de materia).

                        @prefix skos: <http://www.w3.org/2004/02/skos/core#> .

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: conceptos
                `skos:Concept`: elemento fundamental del vocabulario SKOS.

                >Los conceptos son unidades de pensamiento, ideas o significados que subyacen en los sistemas de organización del conocimiento

                        ex:Animal   rdf:type    skos:Concept

                **previamente deben representarse con URIs**

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: etiquetas
                - Los conceptos se pueden caracterizar mediante etiquetas
                - Todas son subpropiedades de `rdfs:label`
                - Se usan para asociar un concepto SKOS con un literal RDF en un idioma determinado
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: etiquetas
                `skos:prefLabel`
                - Permite asignar una etiqueta léxica preferida a un recurso.
                - Debería contener términos usados como descriptores en sistemas de indexación
                - Se recomienda asignar etiquetas preferidas únicas
                        ex:Animal
                          rdf:type          skos:Concept;
                          skos:prefLabel    "animal"@es.

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: etiquetas
                `skos:altLabel`
                - Permite asignar una etiqueta léxica alternativa a un recurso.
                - Se utiliza para representar sinónimos, abreviaturas, acrónimos...

                        ex:Animal
                          rdf:type          skos:Concept;
                          skos:prefLabel    "animal"@es;
                          skos:altLabel     "criatura"@es.

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: etiquetas
                `skos:hiddenLabel`
                - Permite asignar una etiqueta léxica oculta a un recurso.
                - Se utiliza para alimentar motores de búsqueda o indexado de forma no visible.
                - Se suelen usar para incluir errores tipográficos frecuentes

                        ex:Animal
                          rdf:type          skos:Concept;
                          skos:prefLabel    "animal"@es;
                          skos:altLabel     "ganado"@es;
                          skos:hiddenLabel  "granado"@es;

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: otra caracterización
                - `skos:definition`: usada para proporcionar una explicación completa del significado de un concepto
                - Otras: `skos:example`, `skos:scopeNote`, `skos:historyNote`

                todas subpropiedades de `skos:note`
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: relaciones semánticas
                >El significado de un concepto no sólo se define por las palabras en lenguaje natural almacenadas en sus etiquetas, sino por sus relaciones con otros conceptos en el vocabulario
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: relaciones semánticas
                `skos:broader` y `skos:narrower`: se utilizan para representar la estructura jerárquica de un KOS.

                - `skos:broader`: se lee *tiene un concepto más amplio*
                - Una es la inversa de la otra
                - No son transitivas

                        ex:mamíferos rdf:type skos:Concept;
                          skos:prefLabel "mamíferos"@es;
                          skos:broader ex:animales.
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: relaciones semánticas
                `skos:related`: se utiliza para relaciones asociativas no jerárquicas entre dos conceptos.

                - Es una relación simétrica
                - No es transitiva
                - Es disjunta con `skos:broader` o `skos:narrower`

                        ex:pájaros rdf:type skos:Concept;
                          skos:prefLabel "pájaros"@es;
                          skos:related ex:ornitologia.
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: concept schemes
                `skos:ConceptScheme`: clase que agrupa vocabularios compilados con SKOS.

                        ex:tesauroAnimal rdf:type skos:ConceptScheme;
                          dct:title "Tesauro animal";
                          dct:creator ex:Pepe.
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: concept schemes
                `skos:hasTopConcept`
                - Propiedad que permite enlazar un concept scheme con el resto de conceptos que contiene.
                - Punto de acceso a la jerarquía de conocimiento.

                        ex:tesauroAnimal rdf:type skos:ConceptScheme;
                          skos:hasTopConcept ex:mamíferos;
                          skos:hasTopConcept ex:peces.
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: enlazado de conceptos
                `skos:closeMatch`
                - Implica que dos conceptos son lo suficientemente cercanos como para poder ser utilizados indistintamente.
                - No es transitiva

                        dbpedia:Tennis rdf:type skos:ConceptScheme;
                          skos:prefLabel "tenis"@es;
                          skos:closeMatch ex2:Tenis.
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: enlazado de conceptos
                `skos:exactMatch`
                - Implica que dos conceptos tienen significados equivalentes.
                - Sí es transitiva.
                - Es un enlace más fuerte que `closeMatch`

                        ex1:animal skos:exactMatch ex2:animals.
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: reutilización
                `skos:inScheme`
                - Permite reutilizar conceptos de un esquema en otro.

                        ex1:referenceAnimalScheme rdf:type skos:ConceptScheme;
                          dct:title "Reference list of animals"@en.
                          ex1:cats rdf:type skos:Concept;
                          skos:prefLabel "cats"@en;
                          skos:inScheme ex1:referenceAnimalScheme.

                La referencia a ex1:cats podría incluirse en otro esquema:

                        ex2:catScheme rdf:type skos:ConceptScheme;
                        dct:title "The Complete Cat Thesaurus"@en.
                        ex1:cats skos:inScheme ex2:catScheme.
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: colecciones
                `skos:Collection`
                - Permite agrupar conceptos en una colección

                        ex:Francia rdf:type skos:Concept.
                        ex:España rdf:type skos:Concept.
                        ex:Italia rdf:type skos:Concept.
                        ex:PaisesEuropeos rdf:type skos:Collection;
                          skos:member ex:Francia;
                          skos:member ex:España;
                          skos:member ex:Italia.


                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ## SKOS: colecciones
                `skos:OrderedCollection`
                - Capturan orden entre los elementos

                        ex:niños rdf:type skos:Concept.
                        ex:adolescentes rdf:type skos:Concept.
                        ex:adultos rdf:type skos:Concept.

                        _:b0 rdf:type skos:OrderedCollection;
                           skos:prefLabel "personas por grupo de edad"@en;
                           skos:memberList _:b1.
                        _:b1 rdf:first ex:niños;
                           rdf:rest _:b2.
                        _:b2 rdf:first ex:adolescentes;
                           rdf:rest _:b3.
                        _:b3 rdf:first ex:adultos;
                           rdf:rest rdf:nil.


                </script>
                </section>

                </section>
                <section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                # modelado de ontologias
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  clases básicas
                <!-- .slide: style="font-size:30px" -->
                - `owl:Thing`: todas las clases heredan de esta y todas las instancias lo son de ella.
                - `owl:Class`: clase de todos los recursos que son clases.
                - `owl:DatatypeProperty`: clase de todas las propiedades cuyos rangos son literales.
                - `owl:ObjectProperty`: clase de todas las propiedades cuyos rangos son instancias de `owl:Class`.
                - `rdf:XMLLiteral`: clase de todos los valores literales XML definidos en la especificación XML Schema.
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  propiedades básicas
                <!-- .slide: style="font-size:30px" -->
                - `rdf:type`: tipo de un recurso. Especifica que es una instancia de una clase.
                - `rdfs:subClassOf`: especifica que una clase es subclase de otra.
                - `rdfs:domain`: implica que, cuando una propiedad se utilice en una tripleta, el sujeto de dicha tripleta tendrá que ser instancia de la clase especificada por `rdfs:domain`.
                - `rdfs:range`: implica que, cuando la propiedad se utilice en una trpleta, el objeto de dicha tripleta tendrá que ser instancia de la clase especificada por `rdfs:range`.
                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  modelado de ontologías

                construir la ontología

                - Crear la ontología
                - Nombrar las clases y caracterizarlas
                - Nombrar las propiedades y caracterizarlas
                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  modelado de ontologías

                declarar hechos sobre un dominio

                - Proporcionar información sobre individuos

                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  modelado de ontologías

                razonar sobre hechos y ontologías

                - Determinar las consecuencias de lo construido y afirmado

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  modelado de ontologías

                herramientas: [Protégé](https://protege.stanford.edu/)
                - Editor de ontologías de código abierto
                - Marco de trabajo para construir sistemas inteligentes
                - Modular y extensible a través de plugins


                </script>
                </section>
                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  ejemplo: inferencia con Protégé

                - Celestino padre-de José Luis
                - José Luis padre-de Miguel
                - tiene-padre inversa de padre-de

                ¿qué infiere el razonador?

                </script>
                </section>

                <section data-id="1" data-markdown>
                <script type="text/template">
                ##  ejemplo: modelado SKOS

                - importar vocabulario [SKOS](http://purl.org/iso25964/skos-thes)
                - Definir categoría, sección, subsección, dataset, serie

                </script>
                </section>

                </section>

                <section>

                <div>
                <a href="https://masterdatascience.ifca.es/"><img alt="Logotipo Máster Data Science IFCA"  src="./img/logo_3.png" style="max-width: none; max-height: none; color: rgb(255, 153, 0);  vertical-align:middle;" /></a>
                <p style="font-size:20px; text-align:center; margin-top: 1em"><span style="font-weight: bold;"><a href="https://github.com/masterdatascienceifca/ontologies">Acceso al repositorio con la presentación</a></span></p>
                <p style="font-size:20px; text-align:center; margin-top: 1em"><span style="font-weight: bold;">URL de la presentación: <a href="https://masterdatascienceifca.github.io/ontologies/">https://masterdatascienceifca.github.io/ontologies/</a></span></p>


                <p style="font-size:20px; text-align:center; margin-top: 1em"><span style="font-weight: bold;"><a href="https://twitter.com/predicador37">Miguel Expósito Martín</a></span></p>
                <p style="font-size:20px; text-align:center; margin-top: 1em"><span style="font-weight: bold;"><a href="mailto:miguel.exposito@gmail.com">miguel.exposito@gmail.com</a></span></p>

                </div>

                </section>

				</div>

			</div>

			<script src="lib/js/head.min.js"></script>
			<script src="js/reveal.js"></script>

			<script>

				// Full list of configuration options available at:
				// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
			progress: true,
			history: true,
			center: true,

			transition: 'slide', // none/fade/slide/convex/concave/zoom

			// Optional reveal.js plugins
			dependencies: [
			{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
			{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
			{ src: 'plugin/zoom-js/zoom.js', async: true },
			{ src: 'plugin/tagcloud/tagcloud.js', async: true },
			{ src: 'plugin/chalkboard/chalkboard.js' },
			{ src: 'plugin/notes/notes.js', async: true }
			],
			keyboard: {
				67: function() { RevealChalkboard.toggleNotesCanvas() },	// toggle notes canvas when 'c' is pressed
				66: function() { RevealChalkboard.toggleChalkboard() },	// toggle chalkboard when 'b' is pressed
				46: function() { RevealChalkboard.clear() },	// clear chalkboard when 'DEL' is pressed
				 8: function() { RevealChalkboard.reset() },	// reset chalkboard data on current slide when 'BACKSPACE' is pressed
				68: function() { RevealChalkboard.download() },	// downlad recorded chalkboard drawing when 'd' is pressed
			}
			});

			</script>

		</body>
	</html>
